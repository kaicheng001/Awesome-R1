name: ü§ñ Auto Update R1 Papers

on:
  schedule:
    - cron: '0 2 * * *'  # Daily at 02:00 UTC (10:00 Beijing Time)
  workflow_dispatch:
    inputs:
      debug_mode:
        description: 'Enable debug mode for detailed output'
        required: false
        default: false
        type: boolean
      force_update:
        description: 'Force update even if no changes'
        required: false
        default: false
        type: boolean
      days_back:
        description: 'Days to look back for papers (default: 3)'
        required: false
        default: '3'
        type: string

jobs:
  update-papers:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üêç Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: üì¶ Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests python-dateutil lxml
        shell: bash

      - name: ‚öñÔ∏è Configure Git
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: üìÖ Get Current Date
        id: date
        run: |
          echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
          echo "timestamp=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT

      - name: üßπ Pre-cleanup Temporary Files
        run: |
          echo "üßπ Cleaning up any existing temporary files..."
          rm -f .github/has_changes.txt .github/commit_messages.json .github/pr_body.md
          echo "‚úÖ Pre-cleanup completed"

      - name: üîç Search and Update Papers
        id: search
        run: |
          echo "üöÄ Starting R1 Papers Bot..."
          echo "üìÖ Run time: $(date)"
          echo "üîß Debug mode: ${{ github.event.inputs.debug_mode || 'false' }}"
          echo "üîß Days back: ${{ github.event.inputs.days_back || '3' }}"
          
          # Run the Python script with appropriate flags
          PYTHON_ARGS=""
          if [ "${{ github.event.inputs.debug_mode }}" == "true" ]; then
            PYTHON_ARGS="$PYTHON_ARGS --debug"
          fi
          
          # For GitHub Actions, don't cleanup automatically (workflow handles it)
          PYTHON_ARGS="$PYTHON_ARGS --no-cleanup"
          
          # Set custom days back if provided
          if [ ! -z "${{ github.event.inputs.days_back }}" ]; then
            export DAYS_BACK="${{ github.event.inputs.days_back }}"
          fi
          
          python .github/scripts/update_papers.py $PYTHON_ARGS
          
          # Check if changes were made
          if [ -f ".github/has_changes.txt" ]; then
            HAS_CHANGES=$(cat .github/has_changes.txt)
            echo "has_changes=$HAS_CHANGES" >> $GITHUB_OUTPUT
            echo "üìä Has changes: $HAS_CHANGES"
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "üìä Has changes: false (no file found)"
          fi
        shell: bash

      - name: üìÖ Keep Repository Active
        if: steps.search.outputs.has_changes == 'false'
        run: |
          # Keep repository active to prevent workflow suspension
          LAST_COMMIT_DATE=$(git log -1 --format=%ct 2>/dev/null || echo "0")
          CURRENT_DATE=$(date +%s)
          DAYS_SINCE=$((($CURRENT_DATE - $LAST_COMMIT_DATE) / 86400))
          
          echo "üìä Days since last commit: $DAYS_SINCE"
          
          if [ $DAYS_SINCE -gt 25 ] || [ "${{ github.event.inputs.force_update }}" == "true" ]; then
            echo "üîÑ Creating keep-alive commit..."
            mkdir -p .github
            echo "# Repository Keep-Alive" > .github/keep-alive.md
            echo "" >> .github/keep-alive.md
            echo "Last automatic check: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> .github/keep-alive.md
            echo "Status: No new R1 papers found" >> .github/keep-alive.md
            echo "Search scope: Last ${{ github.event.inputs.days_back || '3' }} days" >> .github/keep-alive.md
            echo "" >> .github/keep-alive.md
            echo "This file is automatically updated to keep the repository active" >> .github/keep-alive.md
            echo "and prevent scheduled workflows from being disabled." >> .github/keep-alive.md
            
            git add .github/keep-alive.md
            if git diff --staged --quiet; then
              echo "‚ÑπÔ∏è No changes to commit for keep-alive"
            else
              git commit -m "ü§ñ Keep repository active - $(date +'%Y-%m-%d')"
              git push
              echo "‚úÖ Repository keep-alive commit created"
            fi
          else
            echo "‚ÑπÔ∏è Repository is active, no keep-alive needed"
          fi

      - name: üìù Create Individual Commits and Branch
        if: steps.search.outputs.has_changes == 'true'
        id: commits
        run: |
          BRANCH_NAME="auto-update/r1-papers-${{ steps.date.outputs.timestamp }}"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          
          # Create and switch to new branch
          git checkout -b "$BRANCH_NAME"
          
          # Check if commit messages file exists
          if [ -f ".github/commit_messages.json" ]; then
            echo "üìù Found commit messages file"
            
            # Install jq for JSON parsing
            sudo apt-get update && sudo apt-get install -y jq
            
            # Stage the README changes
            git add README.md
            
            # Read commit messages and create individual commits
            COMMIT_COUNT=0
            while IFS= read -r message; do
              if [ ! -z "$message" ] && [ "$message" != "null" ]; then
                # Create individual commit for each paper
                git commit -m "üìÑ Add $message" --allow-empty
                COMMIT_COUNT=$((COMMIT_COUNT + 1))
                echo "‚úÖ Created commit for: $message"
              fi
            done < <(cat .github/commit_messages.json | jq -r '.[]' 2>/dev/null || echo "")
            
            echo "üìä Created $COMMIT_COUNT individual commits"
            
            # If no individual commits were made, make one general commit
            if [ $COMMIT_COUNT -eq 0 ]; then
              git commit -m "ü§ñ Auto update: Add new R1 papers - ${{ steps.date.outputs.date }}" --allow-empty
              echo "üìù Created fallback commit"
            fi
          else
            echo "‚ö†Ô∏è No commit messages file found, creating general commit"
            git add README.md
            git commit -m "ü§ñ Auto update: Add new R1 papers - ${{ steps.date.outputs.date }}" --allow-empty
          fi
          
          # Push the branch
          git push origin "$BRANCH_NAME"
          echo "üöÄ Pushed branch: $BRANCH_NAME"
        shell: bash

      - name: üìú Create Pull Request
        if: steps.search.outputs.has_changes == 'true'
        id: pr
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          title: "ü§ñ [Auto Update] New R1 Papers - ${{ steps.date.outputs.date }}"
          body-path: .github/pr_body.md
          base: main
          branch: ${{ steps.commits.outputs.branch_name }}
          draft: false
          labels: |
            automated
            papers
            r1
            enhancement

      - name: üìä Workflow Health Check
        run: |
          echo "## üîç Workflow Health Report" >> $GITHUB_STEP_SUMMARY
          echo "- **Run date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered by**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository**: ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Debug mode**: ${{ github.event.inputs.debug_mode || 'false' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Days back**: ${{ github.event.inputs.days_back || '3' }}" >> $GITHUB_STEP_SUMMARY
          
          # Check repository activity
          LAST_COMMIT=$(git log -1 --format='%ci' 2>/dev/null || echo "Unknown")
          echo "- **Last commit**: $LAST_COMMIT" >> $GITHUB_STEP_SUMMARY
          
          # Repository type check
          if [ "${{ github.repository_visibility }}" == "private" ]; then
            echo "- **‚ö†Ô∏è Notice**: Private repository - Actions minutes will be consumed" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **‚úÖ Status**: Public repository - unlimited Actions minutes" >> $GITHUB_STEP_SUMMARY
          fi

      - name: üìà Job Summary
        if: always()
        run: |
          if [ "${{ steps.search.outputs.has_changes }}" == "true" ]; then
            echo "## ‚úÖ Update Successful" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üìÑ Results" >> $GITHUB_STEP_SUMMARY
            
            if [ -f ".github/commit_messages.json" ]; then
              PAPER_COUNT=$(cat .github/commit_messages.json | jq length 2>/dev/null || echo "0")
              echo "- **New papers found**: $PAPER_COUNT" >> $GITHUB_STEP_SUMMARY
              echo "- **Branch created**: ${{ steps.commits.outputs.branch_name }}" >> $GITHUB_STEP_SUMMARY
              echo "- **PR number**: #${{ steps.pr.outputs.pull-request-number }}" >> $GITHUB_STEP_SUMMARY
              echo "- **Status**: ‚úÖ PR created and ready for review" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              
              echo "### üìã Papers Added" >> $GITHUB_STEP_SUMMARY
              cat .github/commit_messages.json | jq -r '.[]' 2>/dev/null | while IFS= read -r message; do
                if [ ! -z "$message" ] && [ "$message" != "null" ]; then
                  echo "- üìÑ $message" >> $GITHUB_STEP_SUMMARY
                fi
              done || echo "- Error reading commit messages" >> $GITHUB_STEP_SUMMARY
            else
              echo "- **Status**: ‚úÖ PR created for review" >> $GITHUB_STEP_SUMMARY
            fi
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üéØ Next Steps" >> $GITHUB_STEP_SUMMARY
            echo "1. üîç Review the PR for accuracy" >> $GITHUB_STEP_SUMMARY
            echo "2. ‚úÖ Verify all papers are legitimate R1 models" >> $GITHUB_STEP_SUMMARY
            echo "3. üîó Add any missing code/project links" >> $GITHUB_STEP_SUMMARY
            echo "4. üöÄ Merge when ready" >> $GITHUB_STEP_SUMMARY
            
          else
            echo "## ‚ÑπÔ∏è No Updates Needed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "No new R1 papers found in the last ${{ github.event.inputs.days_back || '3' }} days." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üîé Search Details" >> $GITHUB_STEP_SUMMARY
            echo "- **Search scope**: Computer Science papers on arXiv" >> $GITHUB_STEP_SUMMARY
            echo "- **Time range**: Last ${{ github.event.inputs.days_back || '3' }} days" >> $GITHUB_STEP_SUMMARY
            echo "- **Pattern matching**: Enhanced R1 model detection" >> $GITHUB_STEP_SUMMARY
            echo "- **Categories**: cs.AI, cs.CL, cs.CV, cs.LG, cs.RO, cs.HC, cs.IR, cs.MM, cs.NE, cs.SD, cs.SI, cs.CR, cs.DC, cs.SE" >> $GITHUB_STEP_SUMMARY
            echo "- **Next check**: Tomorrow at 02:00 UTC (10:00 Beijing)" >> $GITHUB_STEP_SUMMARY
          fi

      - name: üßπ Cleanup Temporary Files
        if: always()
        run: |
          echo "üßπ Starting cleanup of temporary files..."
          
          # List files before cleanup (for debugging)
          echo "Files in .github/ before cleanup:"
          ls -la .github/ | grep -E "(has_changes|commit_messages|pr_body)" || echo "No temp files found"
          
          # Clean up temporary files
          CLEANED=0
          for file in .github/has_changes.txt .github/commit_messages.json .github/pr_body.md; do
            if [ -f "$file" ]; then
              rm -f "$file"
              echo "üóëÔ∏è Removed: $file"
              CLEANED=$((CLEANED + 1))
            fi
          done
          
          echo "üßπ Cleanup completed. Removed $CLEANED files."
          
          # Verify cleanup
          echo "Files in .github/ after cleanup:"
          ls -la .github/ | grep -E "(has_changes|commit_messages|pr_body)" || echo "‚úÖ All temp files cleaned"

      - name: üîÑ Reset Repository State (on failure)
        if: failure()
        run: |
          echo "üîÑ Workflow failed, checking for uncommitted changes..."
          
          # Check if README was modified but not committed properly
          if git diff --quiet README.md; then
            echo "‚úÖ README.md is clean"
          else
            echo "‚ö†Ô∏è README.md has uncommitted changes, reverting..."
            git checkout README.md
            echo "‚úÖ README.md reverted to last committed state"
          fi
          
          # Check for any staged changes
          if git diff --cached --quiet; then
            echo "‚úÖ No staged changes to clean"
          else
            echo "‚ö†Ô∏è Found staged changes, unstaging..."
            git reset HEAD
            echo "‚úÖ Staged changes cleared"
          fi

      - name: üö® Error Notification
        if: failure()
        run: |
          echo "## ‚ùå Workflow Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The R1 papers auto-update process encountered an error." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîß Common Issues & Solutions" >> $GITHUB_STEP_SUMMARY
          echo "1. **arXiv API Issues**" >> $GITHUB_STEP_SUMMARY
          echo "   - Check if arXiv is accessible" >> $GITHUB_STEP_SUMMARY
          echo "   - Verify API rate limits aren't exceeded" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "2. **README Format Issues**" >> $GITHUB_STEP_SUMMARY
          echo "   - Ensure Papers table exists and has correct format" >> $GITHUB_STEP_SUMMARY
          echo "   - Check table headers and separators" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "3. **Permission Issues**" >> $GITHUB_STEP_SUMMARY
          echo "   - Verify workflow has write permissions" >> $GITHUB_STEP_SUMMARY
          echo "   - Check 'Allow GitHub Actions to create and approve pull requests'" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "4. **Dependencies Issues**" >> $GITHUB_STEP_SUMMARY
          echo "   - Check if Python packages installed correctly" >> $GITHUB_STEP_SUMMARY
          echo "   - Verify network connectivity" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîÑ Recovery Options" >> $GITHUB_STEP_SUMMARY
          echo "- **Manual Trigger**: Use 'Run workflow' button to retry" >> $GITHUB_STEP_SUMMARY
          echo "- **Debug Mode**: Enable debug mode for detailed logs" >> $GITHUB_STEP_SUMMARY
          echo "- **Extended Search**: Increase 'days_back' parameter" >> $GITHUB_STEP_SUMMARY
          echo "- **Force Update**: Enable 'force_update' to bypass checks" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üîç **Action Required**: Check the workflow logs above for specific error details"